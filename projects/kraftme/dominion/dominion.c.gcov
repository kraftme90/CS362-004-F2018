        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:113
        -:    0:Programs:71
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 18176134 returned 100% blocks executed 100%
 18176134:    8:int compare(const void* a, const void* b) {
 18176134:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 7118214 (fallthrough)
branch  1 taken 11057920
  7118214:   10:    return 1;
 11057920:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 6988910 (fallthrough)
branch  1 taken 4069010
  6988910:   12:    return -1;
  4069010:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 0 returned 0% blocks executed 0%
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
call    0 never executed
    #####:   45:  PutSeed((long)randomSeed);
call    0 never executed
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
branch  0 never executed
branch  1 never executed
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 never executed
branch  1 never executed
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
branch  0 never executed
branch  1 never executed
    #####:  193:    drawCard(state->whoseTurn, state);
call    0 never executed
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 795629 returned 100% blocks executed 100%
   795629:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   795629:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   795629:  209:  if (state->deckCount[player] < 1)
branch  0 taken 96469 (fallthrough)
branch  1 taken 699160
    96469:  210:    return -1;
   699160:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 699160
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  9151354:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 7753034
branch  1 taken 699160 (fallthrough)
  7753034:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 7753034
  7753034:  216:    newDeck[newDeckPos] = state->deck[player][card];
  7753034:  217:    newDeckPos++;
 32611375:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 24858341
branch  1 taken 7753034 (fallthrough)
 24858341:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  7753034:  221:    state->deckCount[player]--;
        -:  222:  }
  8452194:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 7753034
branch  1 taken 699160 (fallthrough)
  7753034:  224:    state->deck[player][i] = newDeck[i];
  7753034:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   699160:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 1274 returned 100% blocks executed 100%
     1274:  315:int handCard(int handPos, struct gameState *state) {
     1274:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 1274
     1274:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 233884 returned 100% blocks executed 100%
   233884:  346:int whoseTurn(struct gameState *state) {
   233884:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 2868234 returned 100% blocks executed 100%
  2868234:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  2868234:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 56115 (fallthrough)
branch  1 taken 2812119
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    58650:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 2535
branch  1 taken 56115 (fallthrough)
     2535:  534:      state->deck[player][i] = state->discard[player][i];
     2535:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    56115:  538:    state->deckCount[player] = state->discardCount[player];
    56115:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    56115:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 56115
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    56115:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    56115:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    56115:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    56115:  559:    if (deckCounter == 0)
branch  0 taken 55271 (fallthrough)
branch  1 taken 844
    55271:  560:      return -1;
        -:  561:
      844:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      844:  563:    state->deckCount[player]--;
      844:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
  2812119:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  2812119:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  2812119:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  2812119:  576:    state->deckCount[player]--;
  2812119:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  2812963:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 3074 returned 100% blocks executed 63%
     3074:  583:int getCost(int cardNumber)
        -:  584:{
     3074:  585:  switch( cardNumber ) 
branch  0 taken 97
branch  1 taken 134
branch  2 taken 116
branch  3 taken 138
branch  4 taken 94
branch  5 taken 122
branch  6 taken 126
branch  7 taken 204
branch  8 taken 219
branch  9 taken 0
branch 10 taken 0
branch 11 taken 203
branch 12 taken 0
branch 13 taken 237
branch 14 taken 258
branch 15 taken 0
branch 16 taken 0
branch 17 taken 239
branch 18 taken 0
branch 19 taken 204
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 214
branch 25 taken 229
branch 26 taken 240
branch 27 taken 0
        -:  586:    {
        -:  587:    case curse:
       97:  588:      return 0;
        -:  589:    case estate:
      134:  590:      return 2;
        -:  591:    case duchy:
      116:  592:      return 5;
        -:  593:    case province:
      138:  594:      return 8;
        -:  595:    case copper:
       94:  596:      return 0;
        -:  597:    case silver:
      122:  598:      return 3;
        -:  599:    case gold:
      126:  600:      return 6;
        -:  601:    case adventurer:
      204:  602:      return 6;
        -:  603:    case council_room:
      219:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
      203:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
      237:  614:      return 4;
        -:  615:    case village:
      258:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
      239:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
      204:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
      214:  636:      return 4;
        -:  637:    case sea_hag:
      229:  638:      return 4;
        -:  639:    case treasure_map:
      240:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 232610 returned 100% blocks executed 4%
   232610:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  //int index;
   232610:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 232610
   232610:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
   232610:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:  //int drawntreasure=0;
        -:  659:  //int cardDrawn;
        -:  660:  //int z = 0;// this is the counter for the temp hand
   232610:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 84052 (fallthrough)
branch  1 taken 148558
    84052:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
   232610:  667:  switch( card ) 
branch  0 taken 117510
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 113300
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 1800
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  668:    {
        -:  669:    case adventurer:
   117510:  670:    	return getAdventurer(state, currentPlayer, temphand, handPos);
call    0 returned 117510
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++){
branch  0 never executed
branch  1 never executed
    #####:  675:    	  drawCard(currentPlayer, state);
call    0 never executed
        -:  676:      }
        -:  677:			
        -:  678:      //+1 Buy
    #####:  679:      state->numBuys++;
        -:  680:			
        -:  681:      //Each other player draws a card
    #####:  682:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  683:    	  if ( i != currentPlayer ){
branch  0 never executed
branch  1 never executed
    #####:  684:    		  drawCard(i, state);
call    0 never executed
        -:  685:    	  }
        -:  686:      }
        -:  687:			
        -:  688:      //put played card in played card pile
    #####:  689:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  690:			
    #####:  691:      return 0;
        -:  692:			
        -:  693:    case feast:
        -:  694:      //gain card with cost up to 5
        -:  695:      //Backup hand
    #####:  696:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  697:    	  i = state->hand[currentPlayer][i];//Backup card
    #####:  698:    	  state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:      }
        -:  700:      //Backup hand
        -:  701:
        -:  702:      //Update Coins for Buy
    #####:  703:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  704:      x = 1;//Condition to loop on
    #####:  705:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  706:    	  if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  707:    		  if (DEBUG)
        -:  708:    			  printf("None of that card left, sorry!\n");
        -:  709:
        -:  710:    		  if (DEBUG){
        -:  711:    			  printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:    		  }
        -:  713:    	  }
    #####:  714:    	  else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:    		  printf("That card is too expensive!\n");
call    0 never executed
        -:  716:
        -:  717:    		  if (DEBUG){
        -:  718:    			  printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:    		  }
        -:  720:    	  }
        -:  721:    	  else{
        -:  722:
        -:  723:    		  if (DEBUG){
        -:  724:    			  printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:    		  }
        -:  726:
    #####:  727:    		  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  728:    		  x = 0;//No more buying cards
        -:  729:
        -:  730:    		  if (DEBUG){
        -:  731:    			  printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:    		  }
        -:  733:
        -:  734:    	  }
        -:  735:      }     
        -:  736:
        -:  737:      //Reset Hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  739:    	  state->hand[currentPlayer][i] = i;
    #####:  740:    	  i = -1;
        -:  741:      }
        -:  742:      //Reset Hand
        -:  743:      			
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case gardens:
    #####:  747:    	return -1;
        -:  748:			
        -:  749:    case mine:
    #####:  750:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  768:
        -:  769:      //discard card from hand
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:
        -:  772:      //discard trashed card
    #####:  773:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  774:	{
    #####:  775:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  776:	    {
    #####:  777:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  778:	      break;
        -:  779:	    }
        -:  780:	}
        -:  781:			
    #####:  782:      return 0;
        -:  783:			
        -:  784:    case remodel:
    #####:  785:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  786:
    #####:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  803:	      break;
        -:  804:	    }
        -:  805:	}
        -:  806:
        -:  807:
    #####:  808:      return 0;
        -:  809:		
        -:  810:    case smithy:
   113300:  811:    	return getSmithy(state, currentPlayer, handPos);
call    0 returned 113300
        -:  812:		
        -:  813:    case village:
        -:  814:      //+1 Card
    #####:  815:      drawCard(currentPlayer, state);
call    0 never executed
        -:  816:			
        -:  817:      //+2 Actions
    #####:  818:      state->numActions = state->numActions + 2;
        -:  819:			
        -:  820:      //discard played card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  822:      return 0;
        -:  823:		
        -:  824:    case baron:
    #####:  825:      state->numBuys++;//Increase buys by 1!
    #####:  826:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  827:	int p = 0;//Iterator for hand!
    #####:  828:	int card_not_discarded = 1;//Flag for discard set!
    #####:  829:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  830:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  831:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  832:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  833:	    state->discardCount[currentPlayer]++;
    #####:  834:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  835:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  836:	    }
    #####:  837:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  838:	    state->handCount[currentPlayer]--;
    #####:  839:	    card_not_discarded = 0;//Exit the loop
        -:  840:	  }
    #####:  841:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  842:	    if(DEBUG) {
        -:  843:	      printf("No estate cards in your hand, invalid choice\n");
        -:  844:	      printf("Must gain an estate if there are any\n");
        -:  845:	    }
    #####:  846:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  848:	      state->supplyCount[estate]--;//Decrement estates
    #####:  849:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  850:		isGameOver(state);
call    0 never executed
        -:  851:	      }
        -:  852:	    }
    #####:  853:	    card_not_discarded = 0;//Exit the loop
        -:  854:	  }
        -:  855:			    
        -:  856:	  else{
    #####:  857:	    p++;//Next card
        -:  858:	  }
        -:  859:	}
        -:  860:      }
        -:  861:			    
        -:  862:      else{
    #####:  863:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  864:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  865:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  866:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  867:	    isGameOver(state);
call    0 never executed
        -:  868:	  }
        -:  869:	}
        -:  870:      }
        -:  871:	    
        -:  872:      
    #####:  873:      return 0;
        -:  874:		
        -:  875:    case great_hall:
        -:  876:      //+1 Card
    #####:  877:      drawCard(currentPlayer, state);
call    0 never executed
        -:  878:			
        -:  879:      //+1 Actions
    #####:  880:      state->numActions++;
        -:  881:			
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case minion:
        -:  887:      //+1 action
    #####:  888:      state->numActions++;
        -:  889:			
        -:  890:      //discard card from hand
    #####:  891:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  892:			
    #####:  893:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  894:	{
    #####:  895:	  state->coins = state->coins + 2;
        -:  896:	}
        -:  897:			
    #####:  898:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  899:	{
        -:  900:	  //discard hand
    #####:  901:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  902:	    {
    #####:  903:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  904:	    }
        -:  905:				
        -:  906:	  //draw 4
    #####:  907:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  908:	    {
    #####:  909:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  910:	    }
        -:  911:				
        -:  912:	  //other players discard hand and redraw if hand size > 4
    #####:  913:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  914:	    {
    #####:  915:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  916:		{
    #####:  917:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  918:		    {
        -:  919:		      //discard hand
    #####:  920:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  921:			{
    #####:  922:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  923:			}
        -:  924:							
        -:  925:		      //draw 4
    #####:  926:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  927:			{
    #####:  928:			  drawCard(i, state);
call    0 never executed
        -:  929:			}
        -:  930:		    }
        -:  931:		}
        -:  932:	    }
        -:  933:				
        -:  934:	}
    #####:  935:      return 0;
        -:  936:		
        -:  937:    case steward:
    #####:  938:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  939:	{
        -:  940:	  //+2 cards
    #####:  941:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  942:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  943:	}
    #####:  944:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  945:	{
        -:  946:	  //+2 coins
    #####:  947:	  state->coins = state->coins + 2;
        -:  948:	}
        -:  949:      else
        -:  950:	{
        -:  951:	  //trash 2 cards in hand
    #####:  952:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  953:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  954:	}
        -:  955:			
        -:  956:      //discard card from hand
    #####:  957:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  958:      return 0;
        -:  959:		
        -:  960:    case tribute:
    #####:  961:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  962:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  963:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  964:	  state->deckCount[nextPlayer]--;
        -:  965:	}
    #####:  966:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  967:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  968:	  state->discardCount[nextPlayer]--;
        -:  969:	}
        -:  970:	else{
        -:  971:	  //No Card to Reveal
        -:  972:	  if (DEBUG){
        -:  973:	    printf("No cards to reveal\n");
        -:  974:	  }
        -:  975:	}
        -:  976:      }
        -:  977:	    
        -:  978:      else{
    #####:  979:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  980:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  981:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  982:	    state->deckCount[nextPlayer]++;
    #####:  983:	    state->discard[nextPlayer][i] = -1;
    #####:  984:	    state->discardCount[nextPlayer]--;
        -:  985:	  }
        -:  986:			    
    #####:  987:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  988:	} 
    #####:  989:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  990:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  991:	state->deckCount[nextPlayer]--;
    #####:  992:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  993:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  994:	state->deckCount[nextPlayer]--;
        -:  995:      }    
        -:  996:		       
    #####:  997:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  998:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  999:	state->playedCardCount++;
    #####: 1000:	tributeRevealedCards[1] = -1;
        -: 1001:      }
        -: 1002:
    #####: 1003:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1004:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1005:	  state->coins += 2;
        -: 1006:	}
        -: 1007:		    
    #####: 1008:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1009:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1010:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1011:	}
        -: 1012:	else{//Action Card
    #####: 1013:	  state->numActions = state->numActions + 2;
        -: 1014:	}
        -: 1015:      }
        -: 1016:	    
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case ambassador:
    #####: 1020:      j = 0;		//used to check if player has enough cards to discard
        -: 1021:
    #####: 1022:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1023:	{
    #####: 1024:	  return -1;				
        -: 1025:	}
        -: 1026:
    #####: 1027:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1028:	{
    #####: 1029:	  return -1;
        -: 1030:	}
        -: 1031:
    #####: 1032:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1033:	{
    #####: 1034:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1035:	    {
    #####: 1036:	      j++;
        -: 1037:	    }
        -: 1038:	}
    #####: 1039:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1040:	{
    #####: 1041:	  return -1;				
        -: 1042:	}
        -: 1043:
        -: 1044:      if (DEBUG) 
        -: 1045:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1046:
        -: 1047:      //increase supply count for choosen card by amount being discarded
    #####: 1048:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1049:			
        -: 1050:      //each other player gains a copy of revealed card
    #####: 1051:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1052:	{
    #####: 1053:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1054:	    {
    #####: 1055:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1056:	    }
        -: 1057:	}
        -: 1058:
        -: 1059:      //discard played card from hand
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1061:
        -: 1062:      //trash copies of cards returned to supply
    #####: 1063:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1064:	{
    #####: 1065:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1066:	    {
    #####: 1067:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1068:		{
    #####: 1069:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1070:		  break;
        -: 1071:		}
        -: 1072:	    }
        -: 1073:	}			
        -: 1074:
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case cutpurse:
        -: 1078:
    #####: 1079:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1080:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1081:	{
    #####: 1082:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1083:	    {
    #####: 1084:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1085:		{
    #####: 1086:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1087:		    {
    #####: 1088:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1089:		      break;
        -: 1090:		    }
    #####: 1091:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1092:		    {
    #####: 1093:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1094:			{
        -: 1095:			  if (DEBUG)
        -: 1096:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1097:			}	
    #####: 1098:		      break;
        -: 1099:		    }		
        -: 1100:		}
        -: 1101:					
        -: 1102:	    }
        -: 1103:				
        -: 1104:	}				
        -: 1105:
        -: 1106:      //discard played card from hand
    #####: 1107:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1108:
    #####: 1109:      return 0;
        -: 1110:
        -: 1111:		
        -: 1112:    case embargo: 
        -: 1113:      //+2 Coins
    #####: 1114:      state->coins = state->coins + 2;
        -: 1115:			
        -: 1116:      //see if selected pile is in play
    #####: 1117:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1118:	{
    #####: 1119:	  return -1;
        -: 1120:	}
        -: 1121:			
        -: 1122:      //add embargo token to selected supply pile
    #####: 1123:      state->embargoTokens[choice1]++;
        -: 1124:			
        -: 1125:      //trash card
    #####: 1126:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1127:      return 0;
        -: 1128:		
        -: 1129:    case outpost:
        -: 1130:      //set outpost flag
    #####: 1131:      state->outpostPlayed++;
        -: 1132:			
        -: 1133:      //discard card
    #####: 1134:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1135:      return 0;
        -: 1136:		
        -: 1137:    case salvager:
     1800: 1138:    	return getSalvager(choice1, state, currentPlayer, handPos);
call    0 returned 1800
        -: 1139:		
        -: 1140:    case sea_hag:
    #####: 1141:    	return getSeaHag(state, currentPlayer, handPos);
call    0 never executed
        -: 1142:		
        -: 1143:    case treasure_map:
    #####: 1144:    	return getTreasureMap(state, currentPlayer, handPos);
call    0 never executed
        -: 1145:    }
        -: 1146:	
    #####: 1147:  return -1;
        -: 1148:}
        -: 1149:
function discardCard called 116374 returned 100% blocks executed 89%
   116374: 1150:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1151:{
        -: 1152:	
        -: 1153:  //if card is not trashed, added to Played pile 
   116374: 1154:  if (trashFlag < 1){
branch  0 taken 115100 (fallthrough)
branch  1 taken 1274
        -: 1155:      //add card to played pile
   115100: 1156:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
   115100: 1157:      state->playedCardCount++;
        -: 1158:  }
        -: 1159:	
        -: 1160:  //set played card to -1
   116374: 1161:  state->hand[currentPlayer][handPos] = -1;
        -: 1162:	
        -: 1163:  //remove card from player's hand
   116374: 1164:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1191 (fallthrough)
branch  1 taken 115183
        -: 1165:    {
        -: 1166:      //reduce number of cards in hand
     1191: 1167:      state->handCount[currentPlayer]--;
        -: 1168:    }
   115183: 1169:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 115183
        -: 1170:    {
        -: 1171:      //reduce number of cards in hand
    #####: 1172:      state->handCount[currentPlayer]--;
        -: 1173:    }
        -: 1174:  else 	
        -: 1175:    {
        -: 1176:      //replace discarded card with last card in hand
   115183: 1177:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1178:      //set last card to -1
   115183: 1179:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1180:      //reduce number of cards in hand
   115183: 1181:      state->handCount[currentPlayer]--;
        -: 1182:    }
        -: 1183:	
   116374: 1184:  return 0;
        -: 1185:}
        -: 1186:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1187:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1188:{
        -: 1189:  //Note: supplyPos is enum of choosen card
        -: 1190:	
        -: 1191:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1192:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1193:    {
    #####: 1194:      return -1;
        -: 1195:    }
        -: 1196:	
        -: 1197:  //added card for [whoseTurn] current player:
        -: 1198:  // toFlag = 0 : add to discard
        -: 1199:  // toFlag = 1 : add to deck
        -: 1200:  // toFlag = 2 : add to hand
        -: 1201:
    #####: 1202:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1203:    {
    #####: 1204:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1205:      state->deckCount[player]++;
        -: 1206:    }
    #####: 1207:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1208:    {
    #####: 1209:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1210:      state->handCount[player]++;
        -: 1211:    }
        -: 1212:  else
        -: 1213:    {
    #####: 1214:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1215:      state->discardCount[player]++;
        -: 1216:    }
        -: 1217:	
        -: 1218:  //decrease number in supply pile
    #####: 1219:  state->supplyCount[supplyPos]--;
        -: 1220:	 
    #####: 1221:  return 0;
        -: 1222:}
        -: 1223:
function updateCoins called 232610 returned 100% blocks executed 100%
   232610: 1224:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1225:{
        -: 1226:  int i;
        -: 1227:	
        -: 1228:  //reset coin count
   232610: 1229:  state->coins = 0;
        -: 1230:
        -: 1231:  //add coins for each Treasure card in player's hand
   964536: 1232:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 731926
branch  1 taken 232610 (fallthrough)
        -: 1233:    {
   731926: 1234:      if (state->hand[player][i] == copper)
branch  0 taken 88066 (fallthrough)
branch  1 taken 643860
        -: 1235:	{
    88066: 1236:	  state->coins += 1;
        -: 1237:	}
   643860: 1238:      else if (state->hand[player][i] == silver)
branch  0 taken 88404 (fallthrough)
branch  1 taken 555456
        -: 1239:	{
    88404: 1240:	  state->coins += 2;
        -: 1241:	}
   555456: 1242:      else if (state->hand[player][i] == gold)
branch  0 taken 88258 (fallthrough)
branch  1 taken 467198
        -: 1243:	{
    88258: 1244:	  state->coins += 3;
        -: 1245:	}	
        -: 1246:    }	
        -: 1247:
        -: 1248:  //add bonus
   232610: 1249:  state->coins += bonus;
        -: 1250:
   232610: 1251:  return 0;
        -: 1252:}
        -: 1253:
function getAdventurer called 117510 returned 100% blocks executed 100%
   117510: 1254:int getAdventurer(struct gameState *state, int currentPlayer, int *temphand, int handPos){
   117510: 1255:	int z=0, drawntreasure=0, cardDrawn;
   678733: 1256:	while(drawntreasure<2){
branch  0 taken 443713
branch  1 taken 117510 (fallthrough)
   443713: 1257:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 41198 (fallthrough)
branch  1 taken 402515
    41198: 1258:			shuffle(currentPlayer, state);
call    0 returned 41198
        -: 1259:	    }
   443713: 1260:	    drawCard(currentPlayer, state);
call    0 returned 443713
   443713: 1261:	    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   443713: 1262:	    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 365309 (fallthrough)
branch  1 taken 78404
branch  2 taken 287097 (fallthrough)
branch  3 taken 78212
branch  4 taken 78404 (fallthrough)
branch  5 taken 208693
   235020: 1263:	    	drawntreasure++;
        -: 1264:	    else{
   208693: 1265:	    	z++;  // BUG: incorrectly increments z count before saving cardDrawn to the temphand, should be incremented at the end of the else block
   208693: 1266:	    	temphand[z]=cardDrawn;
   208693: 1267:	    	state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1268:	    	//z++;
        -: 1269:	    }
        -: 1270:	}
   443713: 1271:	while(z-1 >= 0){
branch  0 taken 208693
branch  1 taken 117510 (fallthrough)
        -: 1272:		// Discard all cards in play that have been drawn
   208693: 1273:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
   208693: 1274:	    z=z-1;
        -: 1275:	}
        -: 1276:	//discardCard(handPos, currentPlayer, state, 0);  // BUG: need to discard Adventurer
   117510: 1277:	return 0;
        -: 1278:}
        -: 1279:
function getSmithy called 113300 returned 100% blocks executed 100%
   113300: 1280:int getSmithy(struct gameState *state, int currentPlayer, int handPos){
        -: 1281:    //+3 Cards
   339900: 1282:    for (int i = 1; i < 3; i++){       // BUG: incorrect loop count, should be i = 0; i < 3; i++
branch  0 taken 226600
branch  1 taken 113300 (fallthrough)
   226600: 1283:	  drawCard(currentPlayer, state);
call    0 returned 226600
        -: 1284:	}
        -: 1285:			
        -: 1286:    //discard card from hand
   113300: 1287:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 113300
   113300: 1288:    return 0;
        -: 1289:}
        -: 1290:
function getSalvager called 1800 returned 100% blocks executed 100%
     1800: 1291:int getSalvager(int choice1, struct gameState *state, int currentPlayer, int handPos){
        -: 1292:	//+1 buy
     1800: 1293:	state->numBuys++;
        -: 1294:				
     1800: 1295:	if (choice1){
branch  0 taken 1274 (fallthrough)
branch  1 taken 526
        -: 1296:		//gain coins equal to trashed card
     1274: 1297:		state->coins = state->coins - getCost( handCard(choice1, state) ); // BUG: incorrect arithmetic, should be state->coins '+' getCost(choice1, state)
call    0 returned 1274
call    1 returned 1274
        -: 1298:		//trash card
     1274: 1299:		discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 1274
        -: 1300:	}
        -: 1301:				
        -: 1302:	//discard card
     1800: 1303:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1800
     1800: 1304:	return 0;
        -: 1305:}
        -: 1306:
function getSeaHag called 0 returned 0% blocks executed 0%
    #####: 1307:int getSeaHag(struct gameState *state, int currentPlayer, int handPos){
    #####: 1308:	for (int i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1309:		if (i == currentPlayer){                    // BUG: incorrect equality, should be !=
branch  0 never executed
branch  1 never executed
    #####: 1310:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];	// BUG: should be -1, not --		    
    #####: 1311:			state->deckCount[i]--; // BUG: not needed
    #####: 1312:	    	state->discardCount[i]++;
    #####: 1313:	    	state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse; BUG: should be -1, not --
        -: 1314:	    	//state->supplyCount[curse]--; // BUG: need to take curse from game supply
        -: 1315:	    }
        -: 1316:	}
        -: 1317:	
        -: 1318:	//discardCard(handPos, currentPlayer, state, 0); // BUG: need to discard Sea Hag
    #####: 1319:	return 0;
        -: 1320:}
        -: 1321:
function getTreasureMap called 0 returned 0% blocks executed 0%
    #####: 1322:int getTreasureMap(struct gameState *state, int currentPlayer, int handPos){
        -: 1323:    //search hand for another treasure_map
    #####: 1324:    int index = -1;
    #####: 1325:    for (int i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1326:  	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1327:  		  index = i;
    #####: 1328:  		  break;
        -: 1329:  	  }
        -: 1330:    }
    #####: 1331:    if (index > -1){
branch  0 never executed
branch  1 never executed
        -: 1332:  	  //trash both treasure cards
    #####: 1333:  	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1334:  	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1335:
        -: 1336:  	  //gain 4 Gold cards
    #####: 1337:  	  for (int i = 0; i < 4; i++){
branch  0 never executed
branch  1 never executed
    #####: 1338:  		  gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1339:  	  }
        -: 1340:				
        -: 1341:  	  //return success
    #####: 1342:  	  return 1;
        -: 1343:    }
        -: 1344:			
        -: 1345:    //no second treasure_map found in hand
    #####: 1346:    return -1;
        -: 1347:}
        -: 1348:
        -: 1349://end of dominion.c
        -: 1350:
