        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:25
        -:    0:Programs:25
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 73815 returned 100% blocks executed 100%
    73815:    8:int compare(const void* a, const void* b) {
    73815:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 29625 (fallthrough)
branch  1 taken 44190
    29625:   10:    return 1;
    44190:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 29400 (fallthrough)
branch  1 taken 14790
    29400:   12:    return -1;
    14790:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 16 returned 100% blocks executed 83%
       16:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       16:   44:  SelectStream(1);
call    0 returned 16
       16:   45:  PutSeed((long)randomSeed);
call    0 returned 16
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 16 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 16
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       16:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      176:   57:  for (i = 0; i < 10; i++)
branch  0 taken 160
branch  1 taken 16 (fallthrough)
        -:   58:    {
     1760:   59:      for (j = 0; j < 10; j++)
branch  0 taken 1600
branch  1 taken 160 (fallthrough)
        -:   60:        {
     1600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 1440 (fallthrough)
branch  1 taken 160
branch  2 taken 0 (fallthrough)
branch  3 taken 1440
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       16:   73:  if (numPlayers == 2)
branch  0 taken 16 (fallthrough)
branch  1 taken 0
        -:   74:    {
       16:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       16:   87:  if (numPlayers == 2)
branch  0 taken 16 (fallthrough)
branch  1 taken 0
        -:   88:    {
       16:   89:      state->supplyCount[estate] = 8;
       16:   90:      state->supplyCount[duchy] = 8;
       16:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       16:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       16:  102:  state->supplyCount[silver] = 40;
       16:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      336:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 320
branch  1 taken 16 (fallthrough)
        -:  107:    {
     2640:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 2480
branch  1 taken 160 (fallthrough)
        -:  109:	{
     2480:  110:	  if (kingdomCards[j] == i)
branch  0 taken 160 (fallthrough)
branch  1 taken 2320
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      160:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 160 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 160
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      160:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      160:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2320:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       48:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 32
branch  1 taken 16 (fallthrough)
        -:  139:    {
       32:  140:      state->deckCount[i] = 0;
      128:  141:      for (j = 0; j < 3; j++)
branch  0 taken 96
branch  1 taken 32 (fallthrough)
        -:  142:	{
       96:  143:	  state->deck[i][j] = estate;
       96:  144:	  state->deckCount[i]++;
        -:  145:	}
      256:  146:      for (j = 3; j < 10; j++)
branch  0 taken 224
branch  1 taken 32 (fallthrough)
        -:  147:	{
      224:  148:	  state->deck[i][j] = copper;
      224:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       48:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 32
branch  1 taken 16 (fallthrough)
        -:  155:    {
       32:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 32
branch  1 taken 0 (fallthrough)
branch  2 taken 32
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       48:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 32
branch  1 taken 16 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       32:  166:      state->handCount[i] = 0;
       32:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      448:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 432
branch  1 taken 16 (fallthrough)
        -:  177:    {
      432:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       16:  182:  state->outpostPlayed = 0;
       16:  183:  state->phase = 0;
       16:  184:  state->numActions = 1;
       16:  185:  state->numBuys = 1;
       16:  186:  state->playedCardCount = 0;
       16:  187:  state->whoseTurn = 0;
       16:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       96:  192:  for (it = 0; it < 5; it++){
branch  0 taken 80
branch  1 taken 16 (fallthrough)
       80:  193:    drawCard(state->whoseTurn, state);
call    0 returned 80
        -:  194:  }
        -:  195:
       16:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 16
        -:  197:
       16:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 3413 returned 100% blocks executed 100%
     3413:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3413:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3413:  209:  if (state->deckCount[player] < 1)
branch  0 taken 677 (fallthrough)
branch  1 taken 2736
      677:  210:    return -1;
     2736:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 2736
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    36612:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 31140
branch  1 taken 2736 (fallthrough)
    31140:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 31140
    31140:  216:    newDeck[newDeckPos] = state->deck[player][card];
    31140:  217:    newDeckPos++;
   131079:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99939
branch  1 taken 31140 (fallthrough)
    99939:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    31140:  221:    state->deckCount[player]--;
        -:  222:  }
    33876:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 31140
branch  1 taken 2736 (fallthrough)
    31140:  224:    state->deck[player][i] = newDeck[i];
    31140:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     2736:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 8 returned 100% blocks executed 100%
        8:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        8:  280:  who = state->whoseTurn;
        -:  281:
        8:  282:  if (state->numBuys < 1){
branch  0 taken 2 (fallthrough)
branch  1 taken 6
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        2:  285:    return -1;
        6:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 6
branch  1 taken 2 (fallthrough)
branch  2 taken 4
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        2:  289:    return -1;
        4:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 4
branch  1 taken 2 (fallthrough)
branch  2 taken 2
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        2:  293:    return -1;
        -:  294:  } else {
        2:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        2:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 2
        -:  298:  
        2:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 2
        2:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        2:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 207 returned 100% blocks executed 100%
      207:  315:int handCard(int handPos, struct gameState *state) {
      207:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 207
      207:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 8 returned 100% blocks executed 100%
        8:  320:int supplyCount(int card, struct gameState *state) {
        8:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 1115 returned 100% blocks executed 100%
     1115:  346:int whoseTurn(struct gameState *state) {
     1115:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 8 returned 100% blocks executed 100%
        8:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        8:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 6
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        6:  401:  j = 0;
      156:  402:  for (i = 0; i < 25; i++)
branch  0 taken 150
branch  1 taken 6 (fallthrough)
        -:  403:    {
      150:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 16 (fallthrough)
branch  1 taken 134
        -:  405:	{
       16:  406:	  j++;
        -:  407:	}
        -:  408:    }
        6:  409:  if ( j >= 3)
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        -:  410:    {
        4:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 12105 returned 100% blocks executed 85%
    12105:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    12105:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 377 (fallthrough)
branch  1 taken 11728
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      377:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0
branch  1 taken 377 (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      377:  538:    state->deckCount[player] = state->discardCount[player];
      377:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      377:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 377
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      377:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      377:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      377:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      377:  559:    if (deckCounter == 0)
branch  0 taken 377 (fallthrough)
branch  1 taken 0
      377:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    11728:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    11728:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    11728:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    11728:  576:    state->deckCount[player]--;
    11728:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    11728:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 569 returned 100% blocks executed 100%
      569:  583:int getCost(int cardNumber)
        -:  584:{
      569:  585:  switch( cardNumber ) 
branch  0 taken 22
branch  1 taken 28
branch  2 taken 34
branch  3 taken 29
branch  4 taken 35
branch  5 taken 15
branch  6 taken 23
branch  7 taken 38
branch  8 taken 45
branch  9 taken 2
branch 10 taken 2
branch 11 taken 39
branch 12 taken 2
branch 13 taken 29
branch 14 taken 30
branch 15 taken 2
branch 16 taken 2
branch 17 taken 35
branch 18 taken 2
branch 19 taken 46
branch 20 taken 2
branch 21 taken 2
branch 22 taken 2
branch 23 taken 2
branch 24 taken 35
branch 25 taken 35
branch 26 taken 29
branch 27 taken 2
        -:  586:    {
        -:  587:    case curse:
       22:  588:      return 0;
        -:  589:    case estate:
       28:  590:      return 2;
        -:  591:    case duchy:
       34:  592:      return 5;
        -:  593:    case province:
       29:  594:      return 8;
        -:  595:    case copper:
       35:  596:      return 0;
        -:  597:    case silver:
       15:  598:      return 3;
        -:  599:    case gold:
       23:  600:      return 6;
        -:  601:    case adventurer:
       38:  602:      return 6;
        -:  603:    case council_room:
       45:  604:      return 5;
        -:  605:    case feast:
        2:  606:      return 4;
        -:  607:    case gardens:
        2:  608:      return 4;
        -:  609:    case mine:
       39:  610:      return 5;
        -:  611:    case remodel:
        2:  612:      return 4;
        -:  613:    case smithy:
       29:  614:      return 4;
        -:  615:    case village:
       30:  616:      return 3;
        -:  617:    case baron:
        2:  618:      return 4;
        -:  619:    case great_hall:
        2:  620:      return 3;
        -:  621:    case minion:
       35:  622:      return 5;
        -:  623:    case steward:
        2:  624:      return 3;
        -:  625:    case tribute:
       46:  626:      return 5;
        -:  627:    case ambassador:
        2:  628:      return 3;
        -:  629:    case cutpurse:
        2:  630:      return 4;
        -:  631:    case embargo: 
        2:  632:      return 2;
        -:  633:    case outpost:
        2:  634:      return 5;
        -:  635:    case salvager:
       35:  636:      return 4;
        -:  637:    case sea_hag:
       35:  638:      return 4;
        -:  639:    case treasure_map:
       29:  640:      return 4;
        -:  641:    }
        -:  642:	
        2:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
function cardEffect called 908 returned 100% blocks executed 10%
      908:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i, j, k;
      908:  650:  int index=0;
      908:  651:  int currentPlayer = whoseTurn(state);
call    0 returned 908
      908:  652:  int nextPlayer = currentPlayer + 1;
      908:  653:  int tributeRevealedCards[2] = {-1, -1};
        -:  654:  int temphand[MAX_HAND];// moved above the if statement
      908:  655:  int drawntreasure=0;
      908:  656:  int cardDrawn=0;
      908:  657:  int z = 0;// this is the counter for the temp hand
      908:  658:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 340 (fallthrough)
branch  1 taken 568
      340:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:	
        -:  662:  //uses switch to select card and perform actions
      908:  663:  switch( card ) 
branch  0 taken 302
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 302
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 302
branch 18 taken 2
branch 19 taken 0
branch 20 taken 0
        -:  664:    {
        -:  665:    case adventurer:
      302:  666:      playAdventurer(state, drawntreasure, z, currentPlayer, cardDrawn, temphand, handPos);
call    0 returned 302
      302:  667:      return 0;
        -:  668:			
        -:  669:    case council_room:
    #####:  670:			playCouncilRoom(state, handPos, currentPlayer);
call    0 never executed
    #####:  671:      return 0;
        -:  672:			
        -:  673:    case feast:
    #####:  674:      playFeast(state, choice1, temphand, currentPlayer);			
call    0 never executed
    #####:  675:      return 0;
        -:  676:			
        -:  677:    case gardens:
    #####:  678:      return -1;
        -:  679:			
        -:  680:    case mine:
    #####:  681:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  682:
    #####:  683:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  684:      {
    #####:  685:        return -1;
        -:  686:      }
        -:  687:        
    #####:  688:          if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  689:      {
    #####:  690:        return -1;
        -:  691:      }
        -:  692:
    #####:  693:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  694:      {
    #####:  695:        return -1;
        -:  696:      }
        -:  697:
    #####:  698:          gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  699:
        -:  700:          //discard card from hand
    #####:  701:          discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  702:
        -:  703:          //discard trashed card
    #####:  704:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  705:      {
    #####:  706:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  707:          {
    #####:  708:            discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  709:            break;
        -:  710:          }
        -:  711:      }
        -:  712:			
    #####:  713:      return 0;
        -:  714:			
        -:  715:    case remodel:
    #####:  716:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  717:
    #####:  718:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  719:      {
    #####:  720:        return -1;
        -:  721:      }
        -:  722:
    #####:  723:          gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  724:
        -:  725:          //discard card from hand
    #####:  726:          discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  727:
        -:  728:          //discard trashed card
    #####:  729:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  730:      {
    #####:  731:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  732:          {
    #####:  733:            discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  734:            break;
        -:  735:          }
        -:  736:      }
        -:  737:
    #####:  738:      return 0;
        -:  739:		
        -:  740:    case smithy:
      302:  741:      playSmithy(state, handPos, currentPlayer);
call    0 returned 302
      302:  742:      return 0;
        -:  743:		
        -:  744:    case village:
        -:  745:      //+1 Card
    #####:  746:      drawCard(currentPlayer, state);
call    0 never executed
        -:  747:			
        -:  748:      //+2 Actions
    #####:  749:      state->numActions = state->numActions + 2;
        -:  750:			
        -:  751:      //discard played card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  753:      return 0;
        -:  754:		
        -:  755:    case baron:
    #####:  756:      state->numBuys++;//Increase buys by 1!
    #####:  757:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  758:      int p = 0;//Iterator for hand!
    #####:  759:      int card_not_discarded = 1;//Flag for discard set!
    #####:  760:      while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  761:        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  762:          state->coins += 4;//Add 4 coins to the amount of coins
    #####:  763:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  764:          state->discardCount[currentPlayer]++;
    #####:  765:          for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  766:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  767:          }
    #####:  768:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  769:          state->handCount[currentPlayer]--;
    #####:  770:          card_not_discarded = 0;//Exit the loop
        -:  771:        }
    #####:  772:        else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  773:          if(DEBUG) {
        -:  774:            printf("No estate cards in your hand, invalid choice\n");
        -:  775:            printf("Must gain an estate if there are any\n");
        -:  776:          }
    #####:  777:          if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  778:            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  779:            state->supplyCount[estate]--;//Decrement estates
    #####:  780:            if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  781:        isGameOver(state);
call    0 never executed
        -:  782:            }
        -:  783:          }
    #####:  784:          card_not_discarded = 0;//Exit the loop
        -:  785:        }
        -:  786:              
        -:  787:        else{
    #####:  788:          p++;//Next card
        -:  789:        }
        -:  790:      }
        -:  791:          }
        -:  792:              
        -:  793:          else{
    #####:  794:      if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  795:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  796:        state->supplyCount[estate]--;//Decrement Estates
    #####:  797:        if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  798:          isGameOver(state);
call    0 never executed
        -:  799:        }
        -:  800:      }
        -:  801:          }
        -:  802:          
        -:  803:      
    #####:  804:      return 0;
        -:  805:		
        -:  806:    case great_hall:
        -:  807:      //+1 Card
    #####:  808:      drawCard(currentPlayer, state);
call    0 never executed
        -:  809:			
        -:  810:      //+1 Actions
    #####:  811:      state->numActions++;
        -:  812:			
        -:  813:      //discard card from hand
    #####:  814:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  815:      return 0;
        -:  816:		
        -:  817:    case minion:
        -:  818:      //+1 action
    #####:  819:      state->numActions++;
        -:  820:			
        -:  821:      //discard card from hand
    #####:  822:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  823:			
    #####:  824:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  825:      {
    #####:  826:        state->coins = state->coins + 2;
        -:  827:      }
        -:  828:          
    #####:  829:          else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  830:      {
        -:  831:        //discard hand
    #####:  832:        while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  833:          {
    #####:  834:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  835:          }
        -:  836:            
        -:  837:        //draw 4
    #####:  838:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  839:          {
    #####:  840:            drawCard(currentPlayer, state);
call    0 never executed
        -:  841:          }
        -:  842:            
        -:  843:        //other players discard hand and redraw if hand size > 4
    #####:  844:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  845:          {
    #####:  846:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  847:        {
    #####:  848:          if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  849:          {
        -:  850:              //discard hand
    #####:  851:              while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  852:          {
    #####:  853:            discardCard(handPos, i, state, 0);
call    0 never executed
        -:  854:          }
        -:  855:                  
        -:  856:              //draw 4
    #####:  857:              for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  858:          {
    #####:  859:            drawCard(i, state);
call    0 never executed
        -:  860:          }
        -:  861:            }
        -:  862:        }
        -:  863:          }    
        -:  864:      }
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case steward:
    #####:  868:      playSteward(state, choice1, choice2, choice3, handPos, currentPlayer);
call    0 never executed
    #####:  869:      return 0;
        -:  870:		
        -:  871:    case tribute:
    #####:  872:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  873:      if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  874:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  875:        state->deckCount[nextPlayer]--;
        -:  876:      }
    #####:  877:      else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  878:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  879:        state->discardCount[nextPlayer]--;
        -:  880:      }
        -:  881:      else{
        -:  882:        //No Card to Reveal
        -:  883:        if (DEBUG){
        -:  884:          printf("No cards to reveal\n");
        -:  885:        }
        -:  886:      }
        -:  887:          }
        -:  888:          
        -:  889:          else{
    #####:  890:      if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  891:        for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  892:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  893:          state->deckCount[nextPlayer]++;
    #####:  894:          state->discard[nextPlayer][i] = -1;
    #####:  895:          state->discardCount[nextPlayer]--;
        -:  896:        }
        -:  897:              
    #####:  898:        shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  899:      } 
    #####:  900:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  901:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  902:      state->deckCount[nextPlayer]--;
    #####:  903:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  904:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  905:      state->deckCount[nextPlayer]--;
        -:  906:          }    
        -:  907:              
    #####:  908:          if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  909:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  910:            state->playedCardCount++;
    #####:  911:            tributeRevealedCards[1] = -1;
        -:  912:          }
        -:  913:
    #####:  914:        for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  915:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  916:              state->coins += 2;
        -:  917:            }
        -:  918:                  
    #####:  919:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  920:              drawCard(currentPlayer, state);
call    0 never executed
    #####:  921:              drawCard(currentPlayer, state);
call    0 never executed
        -:  922:            }
        -:  923:            else{//Action Card
    #####:  924:              state->numActions = state->numActions + 2;
        -:  925:            }
        -:  926:        }
        -:  927:	    
    #####:  928:      return 0;
        -:  929:		
        -:  930:    case ambassador:
    #####:  931:      j = 0;		//used to check if player has enough cards to discard
        -:  932:
    #####:  933:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  934:      {
    #####:  935:        return -1;				
        -:  936:      }
        -:  937:
    #####:  938:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  939:      {
    #####:  940:        return -1;
        -:  941:      }
        -:  942:
    #####:  943:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  944:      {
    #####:  945:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  946:        {
    #####:  947:          j++;
        -:  948:        }
        -:  949:      }
    #####:  950:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  951:      {
    #####:  952:        return -1;				
        -:  953:      }
        -:  954:
        -:  955:          if (DEBUG) 
        -:  956:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  957:
        -:  958:      //increase supply count for choosen card by amount being discarded
    #####:  959:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  960:      
        -:  961:      //each other player gains a copy of revealed card
    #####:  962:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  963:      {
    #####:  964:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  965:        {
    #####:  966:          gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  967:        }
        -:  968:      }
        -:  969:
        -:  970:      //discard played card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  972:
        -:  973:      //trash copies of cards returned to supply
    #####:  974:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  975:      {
    #####:  976:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  977:        {
    #####:  978:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  979:          {
    #####:  980:            discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  981:            break;
        -:  982:          }
        -:  983:        }
        -:  984:      }			
        -:  985:
    #####:  986:      return 0;
        -:  987:		
        -:  988:    case cutpurse:
    #####:  989:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  990:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  991:      {
    #####:  992:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  993:        {
    #####:  994:            for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  995:            {
    #####:  996:              if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  997:              {
    #####:  998:                discardCard(j, i, state, 0);
call    0 never executed
    #####:  999:                break;
        -: 1000:              }
    #####: 1001:              if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1002:              {
    #####: 1003:                for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1004:                {
        -: 1005:                  if (DEBUG)
        -: 1006:                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1007:                }	
    #####: 1008:                break;
        -: 1009:              }		
        -: 1010:            }     
        -: 1011:          }     
        -: 1012:      }				
        -: 1013:
        -: 1014:      //discard played card from hand
    #####: 1015:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case embargo: 
        -: 1019:      //+2 Coins
    #####: 1020:      state->coins = state->coins + 2;
        -: 1021:			
        -: 1022:      //see if selected pile is in play
    #####: 1023:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1024:      {
    #####: 1025:        return -1;
        -: 1026:      }
        -: 1027:			
        -: 1028:      //add embargo token to selected supply pile
    #####: 1029:      state->embargoTokens[choice1]++;
        -: 1030:			
        -: 1031:      //trash card
    #####: 1032:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case outpost:
        -: 1036:      //set outpost flag
    #####: 1037:      state->outpostPlayed++;
        -: 1038:			
        -: 1039:      //discard card
    #####: 1040:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1041:      return 0;
        -: 1042:		
        -: 1043:    case salvager:
        -: 1044:      //+1 buy
      302: 1045:      state->numBuys++;
        -: 1046:			
      302: 1047:      if (choice1)
branch  0 taken 207 (fallthrough)
branch  1 taken 95
        -: 1048:      {
        -: 1049:        //gain coins equal to trashed card
      207: 1050:        state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 207
call    1 returned 207
        -: 1051:        //trash card
      207: 1052:        discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 207
        -: 1053:      }
        -: 1054:			
        -: 1055:      //discard card
      302: 1056:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 302
      302: 1057:      return 0;
        -: 1058:		
        -: 1059:    case sea_hag:
        6: 1060:      for (i = 0; i < state->numPlayers; i++){
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        4: 1061:        if (i != currentPlayer){
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2: 1062:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        2: 1063:          state->discardCount[i]++;
        2: 1064:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1065:        }
        -: 1066:      }
        2: 1067:      return 0;
        -: 1068:		
        -: 1069:    case treasure_map:
        -: 1070:      //search hand for another treasure_map
    #####: 1071:      index = -1;
    #####: 1072:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1073:      {
    #####: 1074:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1075:          {
    #####: 1076:            index = i;
    #####: 1077:            break;
        -: 1078:          }
        -: 1079:      }
    #####: 1080:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1081:      {
        -: 1082:        //trash both treasure cards
    #####: 1083:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1084:        discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1085:
        -: 1086:        //gain 4 Gold cards
    #####: 1087:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1088:          {
    #####: 1089:            gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1090:          }
        -: 1091:            
        -: 1092:        //return success
    #####: 1093:        return 1;
        -: 1094:      }
        -: 1095:			
        -: 1096:      //no second treasure_map found in hand
    #####: 1097:      return -1;
        -: 1098:    }
        -: 1099:	
    #####: 1100:  return -1;
        -: 1101:}
        -: 1102:
function discardCard called 509 returned 100% blocks executed 89%
      509: 1103:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1104:{
        -: 1105:	
        -: 1106:  //if card is not trashed, added to Played pile 
      509: 1107:  if (trashFlag < 1)
branch  0 taken 302 (fallthrough)
branch  1 taken 207
        -: 1108:    {
        -: 1109:      //add card to played pile
      302: 1110:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      302: 1111:      state->playedCardCount++;
        -: 1112:    }
        -: 1113:	
        -: 1114:  //set played card to -1
      509: 1115:  state->hand[currentPlayer][handPos] = -1;
        -: 1116:	
        -: 1117:  //remove card from player's hand
      509: 1118:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 210 (fallthrough)
branch  1 taken 299
        -: 1119:    {
        -: 1120:      //reduce number of cards in hand
      210: 1121:      state->handCount[currentPlayer]--;
        -: 1122:    }
      299: 1123:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 299
        -: 1124:    {
        -: 1125:      //reduce number of cards in hand
    #####: 1126:      state->handCount[currentPlayer]--;
        -: 1127:    }
        -: 1128:  else 	
        -: 1129:    {
        -: 1130:      //replace discarded card with last card in hand
      299: 1131:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1132:      //set last card to -1
      299: 1133:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1134:      //reduce number of cards in hand
      299: 1135:      state->handCount[currentPlayer]--;
        -: 1136:    }
        -: 1137:	
      509: 1138:  return 0;
        -: 1139:}
        -: 1140:
function gainCard called 2 returned 100% blocks executed 70%
        2: 1141:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1142:{
        -: 1143:  //Note: supplyPos is enum of choosen card
        -: 1144:	
        -: 1145:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1146:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -: 1147:    {
    #####: 1148:      return -1;
        -: 1149:    }
        -: 1150:	
        -: 1151:  //added card for [whoseTurn] current player:
        -: 1152:  // toFlag = 0 : add to discard
        -: 1153:  // toFlag = 1 : add to deck
        -: 1154:  // toFlag = 2 : add to hand
        -: 1155:
        2: 1156:  if (toFlag == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1157:    {
    #####: 1158:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1159:      state->deckCount[player]++;
        -: 1160:    }
        2: 1161:  else if (toFlag == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1162:    {
    #####: 1163:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1164:      state->handCount[player]++;
        -: 1165:    }
        -: 1166:  else
        -: 1167:    {
        2: 1168:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1169:      state->discardCount[player]++;
        -: 1170:    }
        -: 1171:	
        -: 1172:  //decrease number in supply pile
        2: 1173:  state->supplyCount[supplyPos]--;
        -: 1174:	 
        2: 1175:  return 0;
        -: 1176:}
        -: 1177:
function updateCoins called 918 returned 100% blocks executed 100%
      918: 1178:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1179:{
        -: 1180:  int i;
        -: 1181:	
        -: 1182:  //reset coin count
      918: 1183:  state->coins = 0;
        -: 1184:
        -: 1185:  //add coins for each Treasure card in player's hand
     4018: 1186:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 3100
branch  1 taken 918 (fallthrough)
        -: 1187:    {
     3100: 1188:      if (state->hand[player][i] == copper)
branch  0 taken 366 (fallthrough)
branch  1 taken 2734
        -: 1189:	{
      366: 1190:	  state->coins += 1;
        -: 1191:	}
     2734: 1192:      else if (state->hand[player][i] == silver)
branch  0 taken 269 (fallthrough)
branch  1 taken 2465
        -: 1193:	{
      269: 1194:	  state->coins += 2;
        -: 1195:	}
     2465: 1196:      else if (state->hand[player][i] == gold)
branch  0 taken 236 (fallthrough)
branch  1 taken 2229
        -: 1197:	{
      236: 1198:	  state->coins += 3;
        -: 1199:	}	
        -: 1200:    }	
        -: 1201:  //add bonus
      918: 1202:  state->coins += bonus;
        -: 1203:
      918: 1204:  return 0;
        -: 1205:}
        -: 1206:
function playAdventurer called 302 returned 100% blocks executed 100%
      302: 1207:void playAdventurer(struct gameState *state, int drawntreasure, int z, int currentPlayer, int cardDrawn, int *temphand, int handPos){
        -: 1208:  // Variables used: drawntreasure, state, currentPlayer, z, temphand
        -: 1209:  //while(drawntreasure<2){   //Original line
     2593: 1210:  while(drawntreasure<4){   //Bug: allows adventurer to draw more treasure cards than intended, artem 181013
branch  0 taken 1989
branch  1 taken 302 (fallthrough)
     1989: 1211:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 300 (fallthrough)
branch  1 taken 1689
      300: 1212:      shuffle(currentPlayer, state);
call    0 returned 300
        -: 1213:    }
     1989: 1214:    drawCard(currentPlayer, state);
call    0 returned 1989
     1989: 1215:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     1989: 1216:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 taken 1609 (fallthrough)
branch  1 taken 380
branch  2 taken 1194 (fallthrough)
branch  3 taken 415
branch  4 taken 413 (fallthrough)
branch  5 taken 781
     1208: 1217:      drawntreasure++; 
        -: 1218:    }
        -: 1219:    else{
      781: 1220:      temphand[z]=cardDrawn;
      781: 1221:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      781: 1222:      z++;
        -: 1223:    }
        -: 1224:  }
     1385: 1225:  while(z-1>=0){
branch  0 taken 781
branch  1 taken 302 (fallthrough)
      781: 1226:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      781: 1227:    z=z-1;
        -: 1228:  }
        -: 1229:  //discardCard(handPos, currentPlayer, state, 0); // BUG: missing call to discard Adventurer card, kraftme 11/30/2018
      302: 1230:}
        -: 1231:
function playCouncilRoom called 0 returned 0% blocks executed 0%
    #####: 1232:void playCouncilRoom(struct gameState *state, int handPos, int currentPlayer){
        -: 1233:  //Used variables: state, handPos, currentPlayer
        -: 1234:  int i;
        -: 1235:  //+4 Cards
    #####: 1236:  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
    #####: 1238:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1239:	}
        -: 1240:			
        -: 1241:  //+1 Buy
    #####: 1242:  state->numBuys++; 
        -: 1243:  //Each other player draws a card
    #####: 1244:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1245:	{
    #####: 1246:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1247:    {
    #####: 1248:      drawCard(i, state);
call    0 never executed
        -: 1249:    }
        -: 1250:	}		
        -: 1251:  //put played card in played card pile
    #####: 1252:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1253:}
        -: 1254:
function playFeast called 0 returned 0% blocks executed 0%
    #####: 1255:void playFeast(struct gameState *state, int choice1, int *temphand, int currentPlayer){
        -: 1256:  //Used variables: state, choice1, temphand, currentPlayer, 
        -: 1257:  int i, x;
        -: 1258:  //gain card with cost up to 5
        -: 1259:  //Backup hand
    #####: 1260:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1261:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1262:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1263:  }
        -: 1264:  //Backup hand
        -: 1265:
        -: 1266:  //Update Coins for Buy
        -: 1267:  //updateCoins(currentPlayer, state, 5); //Bug: commented out, artem 181013
    #####: 1268:  x = 1;//Condition to loop on
    #####: 1269:  while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1270:    if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1271:      if (DEBUG){
        -: 1272:        printf("None of that card left, sorry!\n");
        -: 1273:      }
        -: 1274:      if (DEBUG){
        -: 1275:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1276:      }
        -: 1277:    }
    #####: 1278:    else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1279:      printf("That card is too expensive!\n");
call    0 never executed
        -: 1280:
        -: 1281:      if (DEBUG){
        -: 1282:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1283:      }
        -: 1284:    }
        -: 1285:    else{
        -: 1286:      if (DEBUG){
        -: 1287:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1288:      }
    #####: 1289:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1290:      x = 0;//No more buying cards
        -: 1291:
        -: 1292:      if (DEBUG){
        -: 1293:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1294:      }
        -: 1295:    }
        -: 1296:  }     
        -: 1297:
        -: 1298:  //Reset Hand
    #####: 1299:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1300:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1301:    temphand[i] = -1;
        -: 1302:  }
        -: 1303:  //Reset Hand
    #####: 1304:}
        -: 1305:
function playSmithy called 302 returned 100% blocks executed 100%
      302: 1306:void playSmithy(struct gameState *state, int handPos, int currentPlayer){
        -: 1307:  // Variables used:  currentPlayer, handPos, state
        -: 1308:  //+3 Cards
        -: 1309:  int i;
     1208: 1310:  for (i = 0; i < 3; i++){
branch  0 taken 906
branch  1 taken 302 (fallthrough)
      906: 1311:	  drawCard(currentPlayer, state);
call    0 returned 906
        -: 1312:	}		
        -: 1313:  //discard card from hand
        -: 1314:  //discardCard(handPos, currentPlayer, state, 0); //Bug: discardCard line commented out, artem 181013
        -: 1315:  
      302: 1316:}
        -: 1317:
function playSteward called 0 returned 0% blocks executed 0%
    #####: 1318:void playSteward(struct gameState *state, int choice1, int choice2, int choice3, int handPos, int currentPlayer){
        -: 1319:    // Variables used:  state, choice1, choice2, choice3, handPos, currentPlayer)
    #####: 1320:  if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1321:	{
        -: 1322:	  //+2 cards
    #####: 1323:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1324:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1325:	}
    #####: 1326:  else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1327:	{
        -: 1328:	  //+2 coins
        -: 1329:	  //state->coins = state->coins + 2; //original line
    #####: 1330:    state->coins = state->coins + 20; // Bug/change: extra coins, artem 181013
        -: 1331:	}
        -: 1332:  else
        -: 1333:	{
        -: 1334:	  //trash 2 cards in hand
    #####: 1335:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1336:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1337:	}		
        -: 1338:  //discard card from hand
    #####: 1339:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1340:}
        -: 1341:
        -: 1342://end of dominion.c
        -: 1343:
